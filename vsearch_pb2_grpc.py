# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vsearch_pb2 as vsearch__pb2


class VsearchServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Upsert = channel.unary_unary(
                '/vsearch.VsearchService/Upsert',
                request_serializer=vsearch__pb2.UpsertRequest.SerializeToString,
                response_deserializer=vsearch__pb2.UpsertResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/vsearch.VsearchService/Delete',
                request_serializer=vsearch__pb2.DeleteRequest.SerializeToString,
                response_deserializer=vsearch__pb2.DeleteResponse.FromString,
                )
        self.Search = channel.unary_unary(
                '/vsearch.VsearchService/Search',
                request_serializer=vsearch__pb2.SearchRequest.SerializeToString,
                response_deserializer=vsearch__pb2.SearchResponse.FromString,
                )
        self.Train = channel.unary_unary(
                '/vsearch.VsearchService/Train',
                request_serializer=vsearch__pb2.TrainRequest.SerializeToString,
                response_deserializer=vsearch__pb2.TrainResponse.FromString,
                )
        self.DeleteAll = channel.unary_unary(
                '/vsearch.VsearchService/DeleteAll',
                request_serializer=vsearch__pb2.DeleteAllRequest.SerializeToString,
                response_deserializer=vsearch__pb2.DeleteAllResponse.FromString,
                )
        self.DbStats = channel.unary_unary(
                '/vsearch.VsearchService/DbStats',
                request_serializer=vsearch__pb2.DbStatsRequest.SerializeToString,
                response_deserializer=vsearch__pb2.DbStatsResponse.FromString,
                )
        self.GetVectors = channel.unary_unary(
                '/vsearch.VsearchService/GetVectors',
                request_serializer=vsearch__pb2.GetVectorsRequest.SerializeToString,
                response_deserializer=vsearch__pb2.GetVectorsResponse.FromString,
                )


class VsearchServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Upsert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Train(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DbStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VsearchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Upsert': grpc.unary_unary_rpc_method_handler(
                    servicer.Upsert,
                    request_deserializer=vsearch__pb2.UpsertRequest.FromString,
                    response_serializer=vsearch__pb2.UpsertResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=vsearch__pb2.DeleteRequest.FromString,
                    response_serializer=vsearch__pb2.DeleteResponse.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=vsearch__pb2.SearchRequest.FromString,
                    response_serializer=vsearch__pb2.SearchResponse.SerializeToString,
            ),
            'Train': grpc.unary_unary_rpc_method_handler(
                    servicer.Train,
                    request_deserializer=vsearch__pb2.TrainRequest.FromString,
                    response_serializer=vsearch__pb2.TrainResponse.SerializeToString,
            ),
            'DeleteAll': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAll,
                    request_deserializer=vsearch__pb2.DeleteAllRequest.FromString,
                    response_serializer=vsearch__pb2.DeleteAllResponse.SerializeToString,
            ),
            'DbStats': grpc.unary_unary_rpc_method_handler(
                    servicer.DbStats,
                    request_deserializer=vsearch__pb2.DbStatsRequest.FromString,
                    response_serializer=vsearch__pb2.DbStatsResponse.SerializeToString,
            ),
            'GetVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVectors,
                    request_deserializer=vsearch__pb2.GetVectorsRequest.FromString,
                    response_serializer=vsearch__pb2.GetVectorsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vsearch.VsearchService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VsearchService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Upsert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vsearch.VsearchService/Upsert',
            vsearch__pb2.UpsertRequest.SerializeToString,
            vsearch__pb2.UpsertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vsearch.VsearchService/Delete',
            vsearch__pb2.DeleteRequest.SerializeToString,
            vsearch__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vsearch.VsearchService/Search',
            vsearch__pb2.SearchRequest.SerializeToString,
            vsearch__pb2.SearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Train(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vsearch.VsearchService/Train',
            vsearch__pb2.TrainRequest.SerializeToString,
            vsearch__pb2.TrainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vsearch.VsearchService/DeleteAll',
            vsearch__pb2.DeleteAllRequest.SerializeToString,
            vsearch__pb2.DeleteAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DbStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vsearch.VsearchService/DbStats',
            vsearch__pb2.DbStatsRequest.SerializeToString,
            vsearch__pb2.DbStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vsearch.VsearchService/GetVectors',
            vsearch__pb2.GetVectorsRequest.SerializeToString,
            vsearch__pb2.GetVectorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
